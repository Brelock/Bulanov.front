let status="JS - OK!";function cl(e,t,n,o){return console.log(e,t||"",n||"",o||""),"-"}var glob={navMenuWrapper:null,navMenu:null,pageOverlay:null,scrollTopButton:null},globFunc={returnDOM:function(e){return e instanceof jQuery?e[0]:e},showOverlay:function(e,t,n){switch(e){case"popup":t.classList.contains("js_openPopup")||(t.style.zIndex=1150,t.style.visibility="visible",t.classList.add("js_openPopup"),t.classList.add("js_open"),n&&t.classList.add(n),document.body.classList.add("js_pageOverlayOpen"));break;case"menu":t.classList.contains("js_openMenu")||(t.style.zIndex=900,t.style.visibility="visible",t.classList.add("js_openMenu"),t.classList.add("js_open"),document.body.classList.add("js_pageOverlayOpen"))}},hideOverlay:function(e,t,n){switch(e){case"popup":t.classList.contains("js_openPopup")&&(t.classList.remove("js_openPopup"),t.classList.remove("js_open"),n&&t.classList.remove(n),document.body.classList.remove("js_pageOverlayOpen"),setTimeout(function(){t.classList.contains("js_openPopup")||(t.style.zIndex=-10,t.style.visibility="hidden")},300));break;case"menu":t.classList.contains("js_openMenu")&&(t.classList.remove("js_openMenu"),t.classList.remove("js_open"),document.body.classList.remove("js_pageOverlayOpen"),setTimeout(function(){t.classList.contains("js_openMenu")||(t.style.zIndex=-10,t.style.visibility="hidden")},300))}},toggleButtonContent:function(e,t){var n,o=this.returnDOM(e);t?n=t:e.dataset.text&&(n={default:e.dataset.text,active:e.dataset.textActive}),o.classList.contains("active")?(n&&(o.querySelector("span").innerHTML=n.default),o.classList.remove("active")):(n&&(o.querySelector("span").innerHTML=n.active),o.classList.add("active"))},dropDown:(e,t)=>{e.checked||e.classList.contains("active")?t.style.height=t.firstElementChild.offsetHeight+"px":t.style.height="0px"},animateBlock:function(e){let t=this;this.removeClassFrom(e,"js_animate"),setTimeout(function(){t.addClassTo(e,"js_animate")},50)},getCurrentYPosition:function(){return window.pageYOffset||document.documentElement.scrollTop},addClassTo:function(e,t){var n=this.returnDOM(e);n.classList.contains(t)||n.classList.add(t)},removeClassFrom:function(e,t){var n=this.returnDOM(e);n.classList.contains(t)&&n.classList.remove(t)},transitionHandler:function(e,t,n){e.propertyName&&console.log(e.propertyName),e.srcElement&&console.log(e.srcElement)},getChildsTotalWidth:function(e){let t=e.children,n=0;for(let e=0;e<t.length;e++)n+=t[e].offsetWidth;return n},getCoordsOnPage:function(e){var t=this.returnDOM(e).getBoundingClientRect();return{top:t.top+pageYOffset,left:t.left+pageXOffset,bottom:t.bottom+pageYOffset}},getCoordsOnScreen:function(e){var t=this.returnDOM(e).getBoundingClientRect();return{top:t.top,left:t.left,bottom:t.bottom,right:t.right,width:t.width,height:t.height}},openWidth:function(e){e.style.width=getChildsTotalWidth(e)+"px"},collapseWidth:function(e){e.style.width="0"},isVisible:function(e,t){let n;n=t||"whole";var o=window.pageYOffset,s=document.documentElement.clientHeight,i=e.getBoundingClientRect().top+pageYOffset,l=i+e.offsetHeight;return"whole"==n?document.documentElement.clientWidth>991?l<=o+s&&i>=o:i<=o+s/2&&i>=o:"topBorder"==n?i>=o+130&&i<=o+s:"topBorderIn"==n?i<=o+s:void 0},isVisibleOnXAxis:function(e,t){let n=e.getBoundingClientRect().left>t.getBoundingClientRect().left,o=e.getBoundingClientRect().right<t.getBoundingClientRect().right;return n&&o},isLastChild:function(e){return!e.nextElementSibling},isFirstChild:function(e){return!e.previousElementSibling}},test="include js error";$(document).ready(function(){console.log("document ready"),test="include js - OK",glob.navMenuWrapper=document.getElementById("navMenuWrapper"),glob.navMenu=document.getElementById("navMenu"),glob.pageOverlay=document.getElementById("pageOverlay"),$("body")||console.log("jQuery Error"),$(".dropdownButton").on("click",function(){globFunc.toggleButtonContent(this),globFunc.dropDown(this,glob.navMenuWrapper)}),$("body").on("click",".searchButton",function(){let e=$("#popupSearch");e.length&&glob.PopupModule.openPopup(e,"js_openPopup_search")}),$("body").on("click",".button",function(){let e=document.getElementById("id");e&&glob.PopupModule.openPopup(e)}),$(".description .ellipsis").dotdotdot({height:80,truncate:"word",watch:!0}),$(".title.ellipsis").dotdotdot({height:85,truncate:"word",watch:!0});var e=document.querySelectorAll(".description > p");if(e.length)for(var t=0;t<e.length;t++)!e[t].innerHTML&&e[t].parentElement.removeChild(e[t]);(window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth)<768&&($(".slideshow").slick({dots:!0,infinite:!0,speed:500,fade:!0,cssEase:"linear"}),$(".slide").slick({dots:!0,infinite:!1,speed:500,slidesToShow:4,slidesToScroll:4,responsive:[{breakpoint:1024,settings:{slidesToShow:3,slidesToScroll:3,infinite:!0,dots:!0}},{breakpoint:600,settings:{slidesToShow:2,slidesToScroll:2}},{breakpoint:480,settings:{slidesToShow:1,slidesToScroll:1}}]}))}),window.onload=function(){console.log("window load")};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
